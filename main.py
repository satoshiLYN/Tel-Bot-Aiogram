from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from defDB import BotDB
from ryba import quotes
from sticker import stickers
import os
import random

BotDB = BotDB('ryba.db')

START_COMMAND = """
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/paste - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—É–¥—Ä–æ—Å—Ç—å—é
/moss - –≤—ã–¥–∞—Ç—å –º–æ—Ö
/mosswallet - —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å –º–æ—Ö–æ–º –∏ —Å—á–µ—Ç
/mosstrans - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –º–æ—Ö –∫–æ–º—É-–Ω–∏–±—É–¥—å
"""

load_dotenv()
storage = MemoryStorage()
bot = Bot(os.getenv('TOKEN_API'))
dp = Dispatcher(bot, storage=storage)


class MossTrans(StatesGroup):
    wallet = State()
    countMoss = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)
        wallet = int(''.join(map(str, random.sample("0123456789", 5))))
        if wallet < 10000:
            wallet = wallet * 10
        while BotDB.wallet_exists(wallet):
            wallet = int(''.join(map(str, random.sample("0123456789", 5))))
            while wallet < 10000:
                wallet = wallet * 10
        BotDB.add_wallet(wallet, message.from_user.id)
    await message.bot.send_message(message.from_user.id, START_COMMAND)


@dp.message_handler(commands=['moss'])
async def moss_command(message: types.Message):
    await message.answer(text="""—ç—Ç–æ –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –º–æ—Ö ü¶†
–±–æ–ª—å—à–µ —É –º–µ–Ω—è –Ω–µ—á–µ–≥–æ –Ω–µ—Ç""")
    BotDB.add_moss(message.from_user.id)
    await message.answer(text="–ú—Ö–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: " + BotDB.moss_from_userid(message.from_user.id) +
                         "\n–û–±—â–∏–π —Ñ–æ–Ω–¥ –º–æ—Ö–æ–≤: " + BotDB.moss_cum())


@dp.message_handler(commands=['mosswallet'])
async def mosswallet(message: types.Message):
    await message.answer(text="–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: " + BotDB.get_wallet(message.chat.id) +
                         "\n–ú—Ö–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: " + BotDB.moss_from_userid(message.from_user.id))


@dp.message_handler(commands=['mosstrans'])
async def mosstrans(message: types.Message):
    await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –º–æ—Ö")
    await MossTrans.wallet.set()


@dp.message_handler(state=MossTrans.wallet)
async def mosstrans2(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    numwallet = int(message.text)
    if not BotDB.check_wallet(numwallet):
        await message.answer(text="–¢–∞–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    else:
        await state.update_data(numwallet=numwallet)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –º–æ—Ö–∞.")
        await MossTrans.next()


@dp.message_handler(state=MossTrans.countMoss)
async def mosstrans3(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    nummoss = int(message.text)
    data = await state.get_data()
    if nummoss < 0:
        await message.answer(text="–ù—É –∏ –Ω—É! –í—ã —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Ç–∏—é —Å–≤–æ–∏–º —Ä–µ—à–µ–Ω–∏–µ–º —Å–∫—Ä–∞—Å—Ç—å –º–æ—Ö.")
        if nummoss < (-5):
            await message.answer(text="–í–∞—à–∏ —Ä—É—Ç—å–∫–∏ –Ω–µ –º–æ–≥—É—Ç —É–Ω–µ—Å—Ç–∏ –±–æ–ª—å—à–µ 5 –º–æ—Ö–æ–≤ –∏–∑ —á—É–∂–æ–≥–æ –∫–∞—Ä–º–∞–Ω–∞. " +
                                      "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ. \n–ú–æ–∂–Ω–æ –æ–¥—É–º–∞—Ç—å—Å—è –∫—Ä–∞—Å—Ç—å.")
            return
        elif int(BotDB.moss_from_wallet(int(data['numwallet']))) + nummoss < 0:
            await message.answer(
                text="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ—Ö–∞... –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ. –ú–æ–∂–Ω–æ –æ–¥—É–º–∞—Ç—å—Å—è –∫—Ä–∞—Å—Ç—å.")
            return
        else:
            await state.update_data(nummoss=nummoss)
            data = await state.get_data()
            BotDB.trans_moss(int(data['numwallet']), int(data['nummoss']), message.chat.id)
            await message.answer(text="–ú–æ—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞–¥–µ–Ω." +
                                 "\n–£ –≤–∞—Å " + BotDB.moss_from_userid(message.from_user.id) + "ü¶†")
            await bot.send_message(int(BotDB.get_chat(int(data['numwallet']))),
                                   "–ù—É –∏ –Ω—É! –£ –≤–∞—Å —É–∫—Ä–∞–ª–∏ –º–æ—Ö :( ü¶†" + str(nummoss))
            await state.finish()
    elif int(BotDB.moss_from_userid(message.from_user.id)) - nummoss < 0:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ—Ö–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    else:
        await state.update_data(nummoss=nummoss)
        data = await state.get_data()
        BotDB.trans_moss(int(data['numwallet']), int(data['nummoss']), message.chat.id)
        await message.answer(text="–ú–æ—Ö —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω." +
                             "\n–û—Å—Ç–∞–ª–æ—Å—å " + BotDB.moss_from_userid(message.from_user.id) + "ü¶†")
        await bot.send_message(int(BotDB.get_chat(int(data['numwallet']))), "–í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ –º–æ—Ö ü¶† +" + str(nummoss))
        await state.finish()


@dp.message_handler(commands=['paste'])
async def paste_command(message: types.Message):
    await message.answer(text=random.choice(quotes))


@dp.message_handler(commands=['admincmd'])
async def admin_command(message: types.Message):
    text = message.text
    text_res = text.replace('/admincmd', '')
    max_id = int(BotDB.max_id())
    i = 1
    while i <= max_id:
        await bot.send_message(int(BotDB.userid_from_id(i)), """–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–¥ –±–æ—Ç–æ–º –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.
–ü—Ä–æ—Å—å–±–∞ –Ω–µ –∫—Ä—É—Ç–∏—Ç—å –º–æ—Ö–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö.
–ü–æ–º–µ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞:""" + text_res)
        i += 1


@dp.message_handler(commands=['admincmdstop'])
async def admin_command2(message: types.Message):
    max_id = int(BotDB.max_id())
    i = 1
    while i <= max_id:
        await bot.send_message(int(BotDB.userid_from_id(i)), "–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ë–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
        i += 1


@dp.message_handler(content_types=[types.ContentType.STICKER])
async def echo_sticker(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker=random.choice(stickers))


@dp.message_handler(content_types=[
    types.ContentType.ANIMATION,
    types.ContentType.PHOTO,
    types.ContentType.DOCUMENT,
    types.ContentType.VOICE
]
)
async def echo_uncontent_a(message: types.Message):
    await message.answer(text='—Ä—ã–±–∞ –Ω–µ –ø–æ–Ω—è–ª–∞.......')


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(text=random.choice(quotes))


if __name__ == '__main__':
    executor.start_polling(dp)
